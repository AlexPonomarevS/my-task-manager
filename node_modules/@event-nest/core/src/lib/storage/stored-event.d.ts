import { Class } from "type-fest";
/**
 * Represents an event that will be persisted according to the storage solution that is used.
 * The event is defined by metadata like aggregate root id, version and creation date, and it also includes its payload
 * which can be any object based on the use case. Payload serialization is done using class-transformer
 * (https://github.com/typestack/class-transformer) so the payload needs to follow the rules defined by that library.
 *
 * The class constructor is marked as private to force the use of the static factory methods which are implemented based
 * on the use case to create the event.
 *
 */
export declare class StoredEvent {
    aggregateRootVersion: number;
    private readonly _aggregateRootId;
    private _aggregateRootName;
    private _createdAt;
    private _eventName;
    private readonly _id;
    private _payload;
    private constructor();
    /**
     * Factory method that will create a new event based on the provided info. Typically, it should be used when
     * creating a new event that will be persisted. In this case, the payload is serialized to a plain object using the
     * class-transformer library.
     * @param id The event id
     * @param aggregateRootId The aggregate root id
     * @param aggregateRootName The name of the aggregate root
     * @param payload The event payload as an object.
     * @param occurredAt The event creation date
     */
    static fromPublishedEvent(id: string, aggregateRootId: string, aggregateRootName: string, payload: object, occurredAt: Date): StoredEvent;
    /**
     * Factory method that will create a new event based on the provided info. Typically, it should be used when creating
     * an event that is already persisted, and we want to create a new instance of it to pass it to an aggregate root.
     * In this case the payload is not mapped to a class instance. {@link getPayloadAs} should be later used for this
     * kind of mapping.
     *
     * @param id The event id
     * @param aggregateRootId The aggregate root id
     * @param eventName The event name
     * @param createdAt The event creation date
     * @param aggregateRootVersion The aggregate root version
     * @param aggregateRootName The aggregate root name
     * @param payload The event payload as an object.
     */
    static fromStorage(id: string, aggregateRootId: string, eventName: string, createdAt: Date, aggregateRootVersion: number, aggregateRootName: string, payload: unknown): StoredEvent;
    get aggregateRootId(): string;
    get aggregateRootName(): string;
    get createdAt(): Date;
    get eventName(): string;
    get id(): string;
    get payload(): unknown;
    getPayloadAs<T>(payloadClass: Class<T>): T;
}
