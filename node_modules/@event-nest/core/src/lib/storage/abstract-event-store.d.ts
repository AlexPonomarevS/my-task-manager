import { AggregateRoot } from "../aggregate-root/aggregate-root";
import { DomainEventEmitter } from "../domain-event-emitter";
import { AggregateRootClass, EventStore } from "./event-store";
import { StoredAggregateRoot } from "./stored-aggregate-root";
import { StoredEvent } from "./stored-event";
/**
 * An abstract implementation of the {@link EventStore} interface.
 * Regardless of the database technology, all subclasses should have a common implementation
 * of the {@link EventStore:addPublisher} method and this is why this class exists.
 */
export declare abstract class AbstractEventStore implements EventStore {
    private _eventEmitter;
    protected constructor(_eventEmitter: DomainEventEmitter);
    addPublisher<T extends AggregateRoot>(aggregateRoot: T): T;
    abstract findAggregateRootVersion(id: string): Promise<number>;
    abstract findByAggregateRootId<T extends AggregateRoot>(aggregateRootClass: AggregateRootClass<T>, id: string): Promise<Array<StoredEvent>>;
    abstract findByAggregateRootIds<T extends AggregateRoot>(aggregateRootClass: AggregateRootClass<T>, ids: string[]): Promise<Record<string, Array<StoredEvent>>>;
    abstract generateEntityId(): Promise<string>;
    abstract save(events: Array<StoredEvent>, aggregate: StoredAggregateRoot): Promise<Array<StoredEvent>>;
}
