import { Logger } from "@nestjs/common";
import { StoredEvent } from "../storage/stored-event";
import { AggregateRootEvent } from "./aggregate-root-event";
export declare abstract class AggregateRoot {
    private readonly _id;
    private _appendedEvents;
    private readonly _logger;
    private _version;
    protected constructor(_id: string, logger?: Logger);
    /**
     * Returns a clone array of all the currently appended events of the entity.
     */
    get appendedEvents(): Array<AggregateRootEvent<object>>;
    get id(): string;
    get logger(): Logger;
    /**
     * Defines the current version of the aggregate root. The version is increased
     * each time an event is persisted.
     */
    get version(): number;
    /**
     * Adds an event to the currently existing events of the entity. This will not publish the event. Use the {@link commit}
     * method once all the events you want are appended.
     * @param event The event to be appended
     */
    append(event: object): void;
    /**
     * All the events that have been previously appended will be committed once this method runs. After publishing,
     * the appended events will be deleted so that the next commit publishes newer events.
     * During publishing, the events will be saved and after the successful save, all the application event
     * handlers will be called to take care of async updates.
     * Call this once all the events you want, have been appended.
     */
    commit(): Promise<AggregateRoot>;
    /**
     * Publishes all the provided events using a connected event publisher. To connect a publisher, use the
     * {@link EventStore}. Normally this should never be called by application logic. Instead, after you append the
     * events, you should call the commit method which will end up calling this method.
     *
     * If a publisher is not connected, the method will return a rejected promise.
     * @param events The events to be published
     */
    publish(events: Array<AggregateRootEvent<object>>): Promise<Array<StoredEvent>>;
    /**
     * Used when a set of events have been retrieved from the database. These events can be passed to the method and the
     * method will trigger all the matching {@link ApplyEvent} functions of the entity to populate the object based on
     * application logic.
     * @param events The events that will be sent to {@link ApplyEvent} functions
     */
    reconstitute(events: Array<StoredEvent>): void;
    resolveVersion(events: Array<StoredEvent>): void;
    protected sortEvents(events: Array<StoredEvent>): Array<StoredEvent>;
    private splitEvents;
}
