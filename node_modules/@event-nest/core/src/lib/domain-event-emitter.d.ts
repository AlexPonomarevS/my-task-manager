import { OnModuleDestroy } from "@nestjs/common";
import { Module } from "@nestjs/core/injector/module";
import { PublishedDomainEvent } from "./published-domain-event";
export declare class DomainEventEmitter implements OnModuleDestroy {
    private readonly _concurrentSubscriptions;
    private readonly _handlers;
    private readonly _logger;
    constructor(_concurrentSubscriptions?: boolean);
    get concurrentSubscriptions(): boolean;
    bindSubscriptions(injectorModules: Map<string, Module>): void;
    emit(withAggregate: PublishedDomainEvent<object>): Promise<unknown>;
    emitMultiple(withAggregate: PublishedDomainEvent<object>[]): Promise<unknown>;
    onModuleDestroy(): void;
}
