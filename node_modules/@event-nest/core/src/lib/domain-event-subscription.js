"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainEventSubscription = void 0;
exports.getEventId = getEventId;
exports.getEventsFromDomainEventSubscription = getEventsFromDomainEventSubscription;
exports.isDomainEventSubscription = isDomainEventSubscription;
const node_crypto_1 = require("node:crypto");
const metadata_keys_1 = require("./metadata-keys");
const type_utils_1 = require("./utils/type-utils");
const DomainEventSubscription = (...eventClasses) => {
    return (target) => {
        for (const event of eventClasses) {
            if (!Reflect.hasOwnMetadata(metadata_keys_1.DOMAIN_EVENT_KEY, event)) {
                Reflect.defineMetadata(metadata_keys_1.DOMAIN_EVENT_KEY, { eventSubscriptionId: `${event.name}-${(0, node_crypto_1.randomUUID)()}` }, event);
            }
        }
        Reflect.defineMetadata(metadata_keys_1.DOMAIN_EVENT_SUBSCRIPTION_KEY, { events: eventClasses }, target);
    };
};
exports.DomainEventSubscription = DomainEventSubscription;
// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
function getEventId(eventConstructor) {
    return Reflect.getMetadata(metadata_keys_1.DOMAIN_EVENT_KEY, eventConstructor)?.eventSubscriptionId;
}
function getEventsFromDomainEventSubscription(subscriptionInstance) {
    const metadata = Reflect.getMetadata(metadata_keys_1.DOMAIN_EVENT_SUBSCRIPTION_KEY, subscriptionInstance.constructor);
    return (0, type_utils_1.isNil)(metadata) ? [] : metadata.events;
}
function isDomainEventSubscription(targetInstance) {
    const hasMetadata = Reflect.hasOwnMetadata(metadata_keys_1.DOMAIN_EVENT_SUBSCRIPTION_KEY, targetInstance.constructor);
    return hasMetadata && typeof targetInstance.onDomainEvent === "function";
}
//# sourceMappingURL=domain-event-subscription.js.map