"use strict";
var EventNestPostgreSQLModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventNestPostgreSQLModule = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@event-nest/core");
const common_1 = require("@nestjs/common");
const core_2 = require("@nestjs/core");
const module_providers_1 = require("./module-providers");
let EventNestPostgreSQLModule = EventNestPostgreSQLModule_1 = class EventNestPostgreSQLModule {
    constructor(_eventEmitter, _modulesContainer) {
        this._eventEmitter = _eventEmitter;
        this._modulesContainer = _modulesContainer;
    }
    /**
     * Registers the event-nest module globally with the provided options. The exported providers will be available
     * across the application without having to import the module more than once.
     * @param options The options to configure the PostgreSQL connection.
     */
    static forRoot(options) {
        return {
            exports: [core_1.EVENT_STORE],
            global: true,
            module: EventNestPostgreSQLModule_1,
            providers: module_providers_1.ModuleProviders.create(options)
        };
    }
    /**
     * Registers the event-nest module globally with the provided options. The exported providers will be available
     * across the application without having to import the module more than once.
     * @param options An options object which includes the factory that should be called to resolve the final module options.
     */
    static forRootAsync(options) {
        return {
            exports: [core_1.EVENT_STORE],
            global: true,
            module: EventNestPostgreSQLModule_1,
            providers: module_providers_1.ModuleProviders.createAsync(options)
        };
    }
    /**
     * Registers the event-nest module with the provided options. The exported providers will be available only for the
     * module that imports this module.
     * @param options The options to configure the PostgreSQL connection.
     */
    static register(options) {
        return {
            exports: [core_1.EVENT_STORE],
            global: false,
            module: EventNestPostgreSQLModule_1,
            providers: module_providers_1.ModuleProviders.create(options)
        };
    }
    /**
     * Registers the event-nest module with the provided options. The exported providers will be available only for the
     * module that imports this module.
     * @param options An options object which includes the factory that should be called to resolve the final module options.
     */
    static registerAsync(options) {
        return {
            exports: [core_1.EVENT_STORE],
            global: false,
            module: EventNestPostgreSQLModule_1,
            providers: module_providers_1.ModuleProviders.createAsync(options)
        };
    }
    onApplicationBootstrap() {
        this._eventEmitter.bindSubscriptions(this._modulesContainer);
    }
};
exports.EventNestPostgreSQLModule = EventNestPostgreSQLModule;
exports.EventNestPostgreSQLModule = EventNestPostgreSQLModule = EventNestPostgreSQLModule_1 = tslib_1.__decorate([
    (0, common_1.Module)({}),
    tslib_1.__metadata("design:paramtypes", [core_1.DomainEventEmitter,
        core_2.ModulesContainer])
], EventNestPostgreSQLModule);
//# sourceMappingURL=event-nest-postgresql.module.js.map