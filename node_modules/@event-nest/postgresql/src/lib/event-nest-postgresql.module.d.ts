import { DomainEventEmitter } from "@event-nest/core";
import { DynamicModule, OnApplicationBootstrap } from "@nestjs/common";
import { ModulesContainer } from "@nestjs/core";
import { PostgreSQLModuleAsyncOptions, PostgreSQLModuleOptions } from "./postgresql-module-options";
export declare class EventNestPostgreSQLModule implements OnApplicationBootstrap {
    private readonly _eventEmitter;
    private readonly _modulesContainer;
    constructor(_eventEmitter: DomainEventEmitter, _modulesContainer: ModulesContainer);
    /**
     * Registers the event-nest module globally with the provided options. The exported providers will be available
     * across the application without having to import the module more than once.
     * @param options The options to configure the PostgreSQL connection.
     */
    static forRoot(options: PostgreSQLModuleOptions): DynamicModule;
    /**
     * Registers the event-nest module globally with the provided options. The exported providers will be available
     * across the application without having to import the module more than once.
     * @param options An options object which includes the factory that should be called to resolve the final module options.
     */
    static forRootAsync(options: PostgreSQLModuleAsyncOptions): DynamicModule;
    /**
     * Registers the event-nest module with the provided options. The exported providers will be available only for the
     * module that imports this module.
     * @param options The options to configure the PostgreSQL connection.
     */
    static register(options: PostgreSQLModuleOptions): DynamicModule;
    /**
     * Registers the event-nest module with the provided options. The exported providers will be available only for the
     * module that imports this module.
     * @param options An options object which includes the factory that should be called to resolve the final module options.
     */
    static registerAsync(options: PostgreSQLModuleAsyncOptions): DynamicModule;
    onApplicationBootstrap(): void;
}
