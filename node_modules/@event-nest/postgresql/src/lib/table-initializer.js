"use strict";
var TableInitializer_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableInitializer = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const knex_1 = require("knex");
const schema_configuration_1 = require("./schema-configuration");
let TableInitializer = TableInitializer_1 = class TableInitializer {
    constructor(_schemaConfiguration, _ensureTablesExist, _knexConnection) {
        this._schemaConfiguration = _schemaConfiguration;
        this._ensureTablesExist = _ensureTablesExist;
        this._knexConnection = _knexConnection;
        this._logger = new common_1.Logger(TableInitializer_1.name);
    }
    get ensureTablesExist() {
        return this._ensureTablesExist;
    }
    get schemaConfiguration() {
        return this._schemaConfiguration;
    }
    async onApplicationBootstrap() {
        if (!this._ensureTablesExist) {
            this._logger.debug("Skipping table initialization. ensureTablesExist is set to false or missing");
            return;
        }
        try {
            const [hasAggregatesTable, hasEventsTable] = await Promise.all([
                this._knexConnection.schema
                    .withSchema(this._schemaConfiguration.schema)
                    .hasTable(this._schemaConfiguration.aggregatesTable),
                this._knexConnection.schema
                    .withSchema(this._schemaConfiguration.schema)
                    .hasTable(this._schemaConfiguration.eventsTable)
            ]);
            if (hasAggregatesTable) {
                this._logger.log("Skipping aggregates table initialization. Table already exists");
            }
            else {
                await this._knexConnection.schema
                    .withSchema(this._schemaConfiguration.schema)
                    .createTable(this._schemaConfiguration.aggregatesTable, (table) => {
                    table.uuid("id").primary();
                    table.integer("version").notNullable();
                });
                this._logger.log("Aggregates table created successfully");
            }
            if (hasEventsTable) {
                this._logger.log("Skipping events table initialization. Table already exists");
            }
            else {
                await this._knexConnection.schema
                    .withSchema(this._schemaConfiguration.schema)
                    .createTable(this._schemaConfiguration.eventsTable, (table) => {
                    table.uuid("id").primary();
                    table.uuid("aggregate_root_id").notNullable();
                    table.integer("aggregate_root_version").notNullable();
                    table.text("aggregate_root_name").notNullable();
                    table.text("event_name").notNullable();
                    table.jsonb("payload").notNullable();
                    table.timestamp("created_at", { useTz: true }).notNullable();
                    table
                        .foreign("aggregate_root_id")
                        .references(`id`)
                        .inTable(this._schemaConfiguration.schemaAwareAggregatesTable);
                });
                this._logger.log("Events table created successfully");
            }
        }
        catch (error) {
            this._logger.error("Event Nest table initialization has failed. Tables will have to be created manually.", error);
        }
    }
};
exports.TableInitializer = TableInitializer;
exports.TableInitializer = TableInitializer = TableInitializer_1 = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [schema_configuration_1.SchemaConfiguration, Boolean, Function])
], TableInitializer);
//# sourceMappingURL=table-initializer.js.map