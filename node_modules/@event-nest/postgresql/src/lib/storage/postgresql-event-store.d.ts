import { AbstractEventStore, AggregateRoot, AggregateRootClass, DomainEventEmitter, StoredAggregateRoot, StoredEvent } from "@event-nest/core";
import { knex } from "knex";
import { SchemaConfiguration } from "../schema-configuration";
export declare class PostgreSQLEventStore extends AbstractEventStore {
    private readonly _knexConnection;
    private readonly _logger;
    private readonly _schemaConfiguration;
    constructor(eventEmitter: DomainEventEmitter, schemaName: string, aggregatesTableName: string, eventsTableName: string, _knexConnection: knex.Knex);
    /**
     * @deprecated Use {@link schemaConfiguration} instead
     */
    get aggregatesTableName(): string;
    /**
     * @deprecated Use {@link schemaConfiguration} instead
     */
    get eventsTableName(): string;
    get schemaConfiguration(): SchemaConfiguration;
    /**
     * @deprecated Use {@link schemaConfiguration} instead
     */
    get schemaName(): string;
    findAggregateRootVersion(id: string): Promise<number>;
    findByAggregateRootId<T extends AggregateRoot>(aggregateRootClass: AggregateRootClass<T>, id: string): Promise<Array<StoredEvent>>;
    findByAggregateRootIds<T extends AggregateRoot>(aggregateRootClass: AggregateRootClass<T>, ids: string[]): Promise<Record<string, Array<StoredEvent>>>;
    generateEntityId(): Promise<string>;
    save(events: Array<StoredEvent>, aggregate: StoredAggregateRoot): Promise<Array<StoredEvent>>;
}
